name: Deploy Apps to Environment

trigger: none

pool:
  vmImage: 'windows-latest'

parameters:
  - name: environment
    displayName: Environment
    type: string
    default: DigitalHub-INT
    values:
      - DigitalHub-INT
      - DigitalHub-QA
      - DigitalHub-UAT
      - DigitalHub-PROD
  - name: Nodes
    displayName: |
       Target Roles for the deployment (INT:CM, QA: CM,CD1, UAT/PROD:CD,CD1,CD2,CD3,CD4) 
       Must be listed each in a new line and prefixed with "-"" like a yaml list
    type: object
    default: 
      - CM
      - CD1
#      - CD2
#      - CD3
#      - CD4


stages:
  - stage: Deploy_Apps
    jobs:
    - job: Publish
      displayName: Publish Content of src directory to Pipeline Artifactory
      steps:
        - publish: '$(System.DefaultWorkingDirectory)/src'
          artifact: 'Apps'
    - ${{ each node in parameters.Nodes }}:
      - deployment: deploy_apps_${{node}}
        displayName: 'Deploy Apps to role ${{node}}'
        dependsOn: Publish
        variables:
          - template: envs/${{parameters.environment}}/Common.yaml
          - template: envs/${{parameters.environment}}/${{node}}.yaml
        environment:
          name: ${{parameters.environment}}
          tags: ${{node}}
          resourceType: virtualMachine
        strategy:
          runOnce:
            deploy:
              steps:
                - task: ArchiveFiles@2
                  displayName: Archive current Apps directory
                  inputs:
                    rootFolderOrFile: '${{variables.deploy_path}}\apps'
                    includeRootFolder: true
                    archiveType: 'zip'
                    archiveFile: '${{variables.backup_path}}\${{node}}\apps\$(Build.BuildId).zip'
                - task: CopyFiles@2
                  displayName: Copy new Apps content
                  inputs:
                    SourceFolder: '$(System.DefaultWorkingDirectory)\..\apps\'
                    Contents: '**'
                    TargetFolder: '${{variables.deploy_path}}\apps'
                    OverWrite: true
                - task: PowerShell@2
                  inputs:
                    targetType: 'inline'
                    script: |
                      $path = "${{variables.backup_path}}\${{node}}\apps\"
                      $backupLimit = 2
                      $backupFiles = @(Get-ChildItem -Path $path)
                      if ($backupFiles.Count -gt $backupLimit) {
                         $backupFiles | Sort-Object CreationTime -Descending | Select-Object -Last ($backupFiles.Count - $backupLimit) | Remove-Item
                      }

