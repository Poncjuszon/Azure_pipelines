# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

pr:
- none

pool:
  vmImage: windows-latest

parameters:
  - name: environment
    default: DigitalHub-QA
    values: 
      - DigitalHub-QA
      - DigitalHub-QA2
      - DigitalHub-QA3
      - DigitalHub-QA4
      - DigitalHub-QA5
      - DigitalHub-QA6
      - DigitalHub-QA7
      - DigitalHub-QA8
      - DigitalHub-QA9
      - DigitalHub-QA10

steps:
- script: echo This is the enabling environment pipeline
  displayName: 'Enable Environment ${{ parameters.environment }}'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      sleep 12
  displayName: 'multiline powershell'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $planUri = "$(PlanUrl)"
      $projectId = "$(ProjectId)"
      $hubName = "$(HubName)"
      $planId = "$(PlanId)"
      $taskId = "$(TaskInstanceId)"
      $jobId = "$(JobId)"
      $result = "$(Agent.JobStatus)"
      $base64AuthInfo = "ZW1hdHBpbDo0d200d3R3aGVnYTU1bWN6NG1tbW03cXcyY2VzeWVhZWduY2VkcHlhYnhvZXJod3ZnbGRh"
      $restApiPipelineCallback = "$planUri/$projectId/_apis/distributedtask/hubs/$hubName/plans/$planId/events?api-version=2.0-preview.1"
      $responsebodyCallback = "{ 'name': 'TaskCompleted', 'taskId': '$taskId', 'jobId': '$jobId', 'result': '$result' }"
      $responsebodyCallback
      $result
      Invoke-RestMethod -Uri $restApiPipelineCallback -Verbose -Method Post -ContentType "application/json" -Headers @{Authorization=("Basic {0}" -f $base64AuthInfo)}  -Body $responsebodyCallback
  displayName: 'Return Pipe result'
  condition: ne(variables['planId'], '')

