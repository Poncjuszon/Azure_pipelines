#Hermes 
#this is a pipeline that calls other pipelines and waits for them to finish
#
#
parameters:
  - name: Environment
    displayName: Environment Name
    type: string
    default: DigitalHub-QAXX
  - name: NightlyDeployment
    displayName: Run Deployment
    type: string
    default: false
  - name: NightlyRegression
    displayName: Run Regression
    type: string
    default: false
  - name: LSDigitalHubSiteCoreGitReference
    displayName: Name of the repository that should be used for deployment
    type: string
    default: develop
  - name: LSDigitalHubAutoTestsGitReference
    displayName: Name of the repository that should be used for regression
    type: string
    default: develop


jobs:
#  - job: script
#    pool:
#      vmImage: windows-latest 
#    variables:
#      #NightlyRegression: ${{ parameters.NightlyRegression }}
#      NightlyRegressionParsed: ${{ parameters.NightlyRegression }}
#    steps:
#      - checkout: none
#      - powershell: |
#          #echo "macro epresion"
#          #echo "$(NightlyRegression)"
#          echo "macro expression from runtime expression"
#          echo "$(NightlyRegressionParsed)"
  - job: Nightly
    displayName: Nightly process for ${{parameters.Environment}}
    variables: #need to do such crapy transformation to use variables form variable group
      NightlyDeploymentParsed: ${{ parameters.NightlyDeployment }}
      NightlyRegressionParsed: ${{ parameters.NightlyRegression }}
      LSDigitalHubSiteCoreGitReferenceParsed: ${{ parameters.LSDigitalHubSiteCoreGitReference }}
      LSDigitalHubAutoTestsGitReferenceParsed: ${{ parameters.LSDigitalHubAutoTestsGitReference }}
    pool: Server
    steps:
      - task: Delay@1
        displayName: Wait out Regression
        condition: eq(variables.NightlyRegressionParsed,'False')
        inputs:
            delayForMinutes: 1
      - task: Delay@1
        displayName: Wait out Deployment
        condition: eq(variables.NightlyDeploymentParsed,'False')
        inputs:
            delayForMinutes: 1
      - task: InvokeRESTAPI@1
        displayName: Enable Environment
        inputs:
          connectionType: 'connectedServiceName'
          serviceConnection: 'Pipelines_caller'
          method: 'POST'
          headers: |
            {
            "Authorization":"Basic ZW1hdHBpbDo0d200d3R3aGVnYTU1bWN6NG1tbW03cXcyY2VzeWVhZWduY2VkcHlhYnhvZXJod3ZnbGRh",
            "Content-Type":"application/json"
            }
          body: |
            {
                'resources': {
                    'repositories': {
                        'self': {
                            'refName': 'refs/heads/main'
                        }
                    }
                },
                'templateParameters': {
                    'environment': '${{parameters.Environment}}'
                },
                "variables": {
                  "PlanUrl": {"isSecret":"false" ,"value": "$(system.CollectionUri)"},
                  "ProjectId": {"isSecret":"false" ,"value":"$(system.TeamProjectId)"},
                  "HubName": {"isSecret":"false" ,"value":"$(system.HostType)"},
                  "PlanId": {"isSecret":"false" ,"value":"$(system.PlanId)"},
                  "JobId": {"isSecret":"false" ,"value":"$(system.JobId)"},
                  "TimelineId": {"isSecret":"false" ,"value":"$(system.TimelineId)"},
                  "TaskInstanceId": {"isSecret":"false" ,"value":"$(system.TaskInstanceId)"}
                }
            }
          urlSuffix: '/23/runs?api-version=6.0-preview.1'
          waitForCompletion: 'true'
      - task: InvokeRESTAPI@1
        displayName: Run Deployment
        condition: eq(variables.NightlyDeploymentParsed,'True')
        inputs:
          connectionType: 'connectedServiceName'
          serviceConnection: 'Pipelines_caller'
          method: 'POST'
          headers: |
            {
            "Authorization":"Basic ZW1hdHBpbDo0d200d3R3aGVnYTU1bWN6NG1tbW03cXcyY2VzeWVhZWduY2VkcHlhYnhvZXJod3ZnbGRh",
            "Content-Type":"application/json"
            }
          body: |
            {
                'resources': {
                    'repositories': {
                        'self': {
                            'refName': 'refs/heads/main'
                        }
                    }
                },
                'templateParameters': {
                    'environment': '${{parameters.Environment}}'
                },
                "variables": {
                  "PlanUrl": {"isSecret":"false" ,"value": "$(system.CollectionUri)"},
                  "ProjectId": {"isSecret":"false" ,"value":"$(system.TeamProjectId)"},
                  "HubName": {"isSecret":"false" ,"value":"$(system.HostType)"},
                  "PlanId": {"isSecret":"false" ,"value":"$(system.PlanId)"},
                  "JobId": {"isSecret":"false" ,"value":"$(system.JobId)"},
                  "TimelineId": {"isSecret":"false" ,"value":"$(system.TimelineId)"},
                  "TaskInstanceId": {"isSecret":"false" ,"value":"$(system.TaskInstanceId)"}
                }
            }
          urlSuffix: '/24/runs?api-version=6.0-preview.1'
          waitForCompletion: 'true'
      - task: InvokeRESTAPI@1
        displayName: Run Regression
        condition: eq(variables.NightlyRegressionParsed,'True')
        inputs:
          connectionType: 'connectedServiceName'
          serviceConnection: 'Pipelines_caller'
          method: 'POST'
          headers: |
            {
            "Authorization":"Basic ZW1hdHBpbDo0d200d3R3aGVnYTU1bWN6NG1tbW03cXcyY2VzeWVhZWduY2VkcHlhYnhvZXJod3ZnbGRh",
            "Content-Type":"application/json"
            }
          body: |
            {
                'resources': {
                    'repositories': {
                        'self': {
                            'refName': 'refs/heads/main'
                        }
                    }
                },
                'templateParameters': {
                    'environment': '${{parameters.Environment}}'
                },
                "variables": {
                  "PlanUrl": {"isSecret":"false" ,"value": "$(system.CollectionUri)"},
                  "ProjectId": {"isSecret":"false" ,"value":"$(system.TeamProjectId)"},
                  "HubName": {"isSecret":"false" ,"value":"$(system.HostType)"},
                  "PlanId": {"isSecret":"false" ,"value":"$(system.PlanId)"},
                  "JobId": {"isSecret":"false" ,"value":"$(system.JobId)"},
                  "TimelineId": {"isSecret":"false" ,"value":"$(system.TimelineId)"},
                  "TaskInstanceId": {"isSecret":"false" ,"value":"$(system.TaskInstanceId)"}
                }
            }
          urlSuffix: '/25/runs?api-version=6.0-preview.1'
          waitForCompletion: 'true'
